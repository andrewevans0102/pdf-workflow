using Microsoft.AspNetCore.Mvc;
using Azure.Storage.Blobs;
using Azure.Storage.Sas;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System;
using System.IO;
using System.Threading.Tasks;

namespace RepairShopApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ReportController : ControllerBase
    {
        private readonly BlobServiceClient _blobServiceClient;
        private readonly string _containerName;
        
        public ReportController(BlobServiceClient blobServiceClient, IConfiguration configuration)
        {
            _blobServiceClient = blobServiceClient;
            _containerName = configuration["BlobStorage:ContainerName"];
        }

        [HttpPost("create-report")]
        public async Task<IActionResult> CreateReport([FromBody] ReportRequest request)
        {
            try
            {
                // 1. Generate PDF using QuestPDF
                var pdfBytes = GeneratePdf(request);
                
                // 2. Upload to Azure Blob Storage
                var blobName = $"report-{Guid.NewGuid()}.pdf";
                var sasUrl = await UploadToBlobStorageAndGetSasUrl(pdfBytes, blobName);
                
                // 3. Return the SAS URL
                return Ok(new { url = sasUrl });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error creating report: {ex.Message}");
            }
        }

        private byte[] GeneratePdf(ReportRequest request)
        {
            // Configure QuestPDF license (Free for personal and small business use)
            QuestPDF.Settings.License = LicenseType.Community;
            
            using (var stream = new MemoryStream())
            {
                Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(50);
                        page.Header().Element(ComposeHeader);
                        page.Content().Element(content => ComposeContent(content, request));
                        page.Footer().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                    });
                }).GeneratePdf(stream);
                
                return stream.ToArray();
            }
        }

        private void ComposeHeader(IContainer container)
        {
            container.Row(row =>
            {
                row.RelativeItem().Column(column =>
                {
                    column.Item().AlignCenter().Text("Repair Shop - Vehicle Report")
                        .FontSize(20).Bold();
                    column.Item().AlignCenter().Text(DateTime.Now.ToString("yyyy-MM-dd HH:mm"))
                        .FontSize(12);
                    column.Item().Height(20);
                });
            });
        }

        private void ComposeContent(IContainer container, ReportRequest request)
        {
            container.Column(column =>
            {
                column.Item().Table(table =>
                {
                    table.ColumnsDefinition(columns =>
                    {
                        columns.RelativeColumn(2);
                        columns.RelativeColumn(3);
                    });
                    
                    // Add rows for each property
                    AddDetailRow(table, "Name", request.Name);
                    AddDetailRow(table, "Wheels", request.Wheels);
                    AddDetailRow(table, "Paint", request.Paint);
                    AddDetailRow(table, "Engine", request.Engine);
                });
                
                column.Item().Height(20);
                
                column.Item().Text("This report was automatically generated by the Repair Shop API.")
                    .FontSize(10).Italic();
            });
        }

        private void AddDetailRow(TableDescriptor table, string label, string value)
        {
            table.Cell().Element(CellStyle).Text(label).Bold();
            table.Cell().Element(CellStyle).Text(value);
        }

        private static IContainer CellStyle(IContainer container)
        {
            return container.Border(1).BorderColor(Colors.Grey.Medium).Padding(5);
        }

        private async Task<string> UploadToBlobStorageAndGetSasUrl(byte[] content, string blobName)
        {
            // Get the container client
            var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);
            
            // Ensure container exists (create if it doesn't)
            await containerClient.CreateIfNotExistsAsync(Azure.Storage.Blobs.Models.PublicAccessType.None);
            
            // Get blob client and upload the file with properties to set content disposition
            var blobClient = containerClient.GetBlobClient(blobName);
            
            // Create blob upload options with content disposition to open in browser
            var options = new Azure.Storage.Blobs.Models.BlobUploadOptions
            {
                HttpHeaders = new Azure.Storage.Blobs.Models.BlobHttpHeaders
                {
                    ContentType = "application/pdf",
                    ContentDisposition = "inline; filename=\"report.pdf\""
                }
            };
            
            using (var stream = new MemoryStream(content))
            {
                await blobClient.UploadAsync(stream, options);
            }
            
            // Generate a SAS token for the blob that expires in 1 hour
            var sasBuilder = new BlobSasBuilder
            {
                BlobContainerName = _containerName,
                BlobName = blobName,
                Resource = "b", // b for blob
                ExpiresOn = DateTimeOffset.UtcNow.AddHours(1)
            };
            
            sasBuilder.SetPermissions(BlobSasPermissions.Read);
            
            // Get the SAS URI
            var sasUri = blobClient.GenerateSasUri(sasBuilder);
            
            return sasUri.ToString();
        }
    }

    public class ReportRequest
    {
        public string Name { get; set; }
        public string Wheels { get; set; }
        public string Paint { get; set; }
        public string Engine { get; set; }
    }
}